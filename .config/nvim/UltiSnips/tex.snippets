global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal

# Symbols
priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet " - " "emdash (long)" rA
 — 
endsnippet

snippet - "endash (middle)" w
–
endsnippet

# Headings
snippet гл "Глава" bA
\chapter{$0}
endsnippet

snippet гл0 "Глава*" bA
\chapter*{$0}
endsnippet

snippet рз "Раздел" bA
\section{$0}
endsnippet

snippet рз0 "Раздел*" bA
\section*{$0}
endsnippet

snippet прз "Подраздел" bA
\subsection{$0}
endsnippet

snippet прз0 "Подраздел*" bA
\subsection*{$0}
endsnippet

# Refs
snippet сл "Ссылка" w
\ref{$1}$0
endsnippet

snippet сми "источник" w
\cite{$1}$0
endsnippet

snippet смф "См. формулу" w
(см. формулу \ref{eqn:$1})$0
endsnippet

snippet смт "См. таблицу" w
(см. таблицу \ref{tab:$1})$0
endsnippet

snippet смр "См. рисунок" w
(см. рисунок \ref{pic:$1})$0
endsnippet

# Environments
snippet тб "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabularx}{\linewidth}{${4:c}}
		\toprule
		$0
		\bottomrule
	\end{tabularx}
\end{table}

endsnippet

snippet рс "Figure environment" b
\begin{figure}[${1:htpb}]
	\center
	\includegraphics[height=${2:5}cm]{$3}
	\caption{$4}
	\label{pic:${5:${3/\W+/-/g}}}
\end{figure}

endsnippet

snippet нм "Enumerate" b
\begin{enumerate}
	\item $0
\end{enumerate}

endsnippet

snippet мр "Itemize" b
\begin{itemize}
	\item $0
\end{itemize}

endsnippet

snippet оп "Description" b
\begin{description}
	\item[$1] $0
\end{description}

endsnippet

snippet ур "Equation" b
\begin{equation}
	$0
	\label{eqn:$1}
\end{equation}
endsnippet

# rus
snippet оо "Item" w

\item $0
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet mk "math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

# Math
context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sq "^2" iA
^2
endsnippet

context "math()"
snippet sq "^2" iA
^2
endsnippet

priority 100
context "math()"
snippet *10 "Tenpower" iA
 \cdot 10^{$1} $0
endsnippet

context "math()"
snippet * "cdot" i
\cdot 
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
		i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet / "Fraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
	.replace('{', '(') \
	.replace('}', ')') + ')')
`
endsnippet

context "math()"
snippet == "equals" iA
&= $1 \\\\
endsnippet

context "math()"
snippet != "equals" iA
\neq 
endsnippet

# Parenthesis
context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet
